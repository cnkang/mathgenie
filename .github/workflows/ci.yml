name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: write

# Cancel previous runs if a new one is triggered
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: "22"
  PNPM_VERSION: "10.15.1"
  # Performance optimization
  NODE_OPTIONS: "--max-old-space-size=4096"
  # Playwright optimization
  PLAYWRIGHT_BROWSERS_PATH: 0

jobs:
  # Job 0: Quick Check (fast feedback for PRs)
  quick-check:
    name: ⚡ Quick Check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: github.event_name == 'pull_request'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: 📋 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Quick lint check
        run: pnpm lint --max-warnings 0

      - name: 🏗️ Type check
        run: pnpm type-check

      - name: 🧪 Quick test
        run: pnpm test:unit --run --reporter=basic

  # Job 1: Code Quality & Linting (runs in parallel)
  code-quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better analysis

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: 📋 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Run ESLint
        run: pnpm lint --format=json --output-file=eslint-report.json
        continue-on-error: true

      - name: 📊 Upload ESLint results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: eslint-report
          path: eslint-report.json

      - name: 🎨 Check code formatting
        run: |
          if ! pnpm format --check; then
            echo "❌ Code formatting issues found. Run 'pnpm format' to fix."
            exit 1
          fi

  # Job 2: Testing (runs in parallel)
  test:
    name: 🧪 Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: 📋 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🧪 Run unit tests with coverage
        run: pnpm test:unit
        env:
          CI: true

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unit-tests
          name: codecov-unit
          fail_ci_if_error: false

      - name: 📋 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-unit
          path: |
            coverage/

  # Job 3: Security Scanning (runs in parallel)
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: 📋 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Run security audit
        run: pnpm audit --audit-level moderate
        continue-on-error: true

      # CodeQL analysis removed - using GitHub's default setup instead

  # Job 4: Build & Performance (runs in parallel)
  build:
    name: 🏗️ Build & Performance
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: 📋 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build application
        run: pnpm build
        env:
          NODE_ENV: production
          CI: true

      - name: 📊 Analyze bundle size
        run: |
          echo "## 📦 Bundle Analysis" >> $GITHUB_STEP_SUMMARY
          echo "| File | Size | Gzipped |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|---------|" >> $GITHUB_STEP_SUMMARY

          for file in dist/assets/*.js; do
            if [ -f "$file" ]; then
              size=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file")
              gzipped=$(gzip -c "$file" | wc -c)
              filename=$(basename "$file")
              echo "| $filename | $(numfmt --to=iec $size) | $(numfmt --to=iec $gzipped) |" >> $GITHUB_STEP_SUMMARY
            fi
          done

      - name: 🚀 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-production
          path: dist/
          retention-days: 7

  # Job 5: Accessibility Testing (integrated with Playwright)
  accessibility:
    name: ♿ Accessibility
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: 📋 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🎭 Install Playwright browsers
        run: npx playwright install chromium --with-deps

      - name: 🏗️ Build application
        run: pnpm build

      - name: ♿ Run accessibility tests
        run: |
          echo "Running comprehensive accessibility tests..."
          pnpm test:e2e:accessibility --reporter=html,json:accessibility-report.json

          echo "## ♿ Accessibility Test Results" >> $GITHUB_STEP_SUMMARY
          echo "Comprehensive accessibility tests completed using Playwright with axe-core integration." >> $GITHUB_STEP_SUMMARY
          echo "Tests include WCAG 2.1 AA compliance checks for light theme, dark theme, form interactions, and error states." >> $GITHUB_STEP_SUMMARY

      - name: 📊 Upload accessibility report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-report
          path: |
            accessibility-report.json
            playwright-report/

  # Job 6: Cross-browser Testing (runs in parallel)
  cross-browser:
    name: 🌐 Cross-browser
    runs-on: ubuntu-latest
    timeout-minutes: 20

    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
        shard: [1, 2]
        include:
          - browser: chromium
            project: chromium
          - browser: firefox
            project: firefox
          - browser: webkit
            project: webkit

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: 📋 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🎭 Install Playwright browsers
        run: |
          npx playwright install ${{ matrix.browser }} --with-deps
          # Verify browser installation
          npx playwright --version

      - name: 🏗️ Build application
        run: pnpm build

      # Playwright will handle server startup automatically

      - name: 🎭 Run Playwright tests
        run: |
          pnpm test:e2e:ci \
            --project=${{ matrix.project }} \
            --shard=${{ matrix.shard }}/2 \
            --reporter=html,json:test-results-${{ matrix.browser }}-${{ matrix.shard }}.json
        env:
          PLAYWRIGHT_OUTPUT_DIR: test-results-${{ matrix.browser }}-${{ matrix.shard }}

      # Server cleanup handled by Playwright

      - name: 📊 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-results-${{ matrix.browser }}-${{ matrix.shard }}
          path: |
            test-results-${{ matrix.browser }}-${{ matrix.shard }}/
            test-results-${{ matrix.browser }}-${{ matrix.shard }}.json
          retention-days: 30

      - name: 📊 Upload Playwright HTML Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ matrix.browser }}-${{ matrix.shard }}
          path: playwright-report/
          retention-days: 30

  # Job 7: Performance Testing (runs after build)
  performance:
    name: ⚡ Performance
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 15

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: 📋 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 📋 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-production
          path: dist/

      - name: 🚀 Run Lighthouse CI
        run: pnpm lighthouse:ci
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: 📊 Upload Lighthouse results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-results
          path: .lighthouseci/

  # Job 8: Dependency Analysis (runs in parallel)
  dependencies:
    name: 📦 Dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: 📋 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Check for outdated dependencies
        run: |
          echo "## 📦 Dependency Status" >> $GITHUB_STEP_SUMMARY
          pnpm outdated --format table > outdated.txt || true

          if [ -s outdated.txt ]; then
            echo "⚠️ Outdated dependencies found:" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            cat outdated.txt >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ All dependencies are up to date!" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 📊 Analyze bundle composition
        run: pnpm analyze

      - name: 📊 Upload dependency analysis
        uses: actions/upload-artifact@v4
        with:
          name: dependency-analysis
          path: |
            outdated.txt
            bundle-report.html

  # Job 9: Quality Gate (runs after all checks)
  quality-gate:
    name: 🚪 Quality Gate
    runs-on: ubuntu-latest
    needs: [code-quality, test, security, build, accessibility]
    if: always()
    timeout-minutes: 5

    steps:
      - name: 📊 Check job results
        run: |
          echo "## 🚪 Quality Gate Results" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality | ${{ needs.code-quality.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ needs.security.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Accessibility | ${{ needs.accessibility.result == 'success' && '✅ Passed' || '⚠️ Issues Found' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Accessibility test result details
          echo "### 📋 Accessibility Test Details" >> $GITHUB_STEP_SUMMARY
          echo "Accessibility tests run in both light and dark modes. Even if issues are found, deployment won't be blocked, but detailed reports will be generated for reference." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Fail if any critical job failed (excluding accessibility, as it may have warnings but shouldn't block deployment)
          if [[ "${{ needs.code-quality.result }}" != "success" ]] || \
             [[ "${{ needs.test.result }}" != "success" ]] || \
             [[ "${{ needs.build.result }}" != "success" ]]; then
            echo "❌ Quality gate failed! Critical checks did not pass." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          # Check accessibility test status (warning but not failure)
          if [[ "${{ needs.accessibility.result }}" != "success" ]]; then
            echo "⚠️ Note: Accessibility tests found some issues, please check the detailed report for fixes." >> $GITHUB_STEP_SUMMARY
          fi

          echo "✅ Quality gate passed!"

      - name: 🎉 Success notification
        if: success()
        run: |
          echo "🎉 All quality checks passed! Vercel will handle deployment automatically." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- Vercel webhook will trigger deployment automatically" >> $GITHUB_STEP_SUMMARY
          echo "- Monitor deployment status in Vercel dashboard" >> $GITHUB_STEP_SUMMARY
          echo "- Check live site after deployment completes" >> $GITHUB_STEP_SUMMARY
