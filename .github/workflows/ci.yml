name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: write

# Cancel previous runs if a new one is triggered
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: "22"
  PNPM_VERSION: "10.15.1"
  # Performance optimization
  NODE_OPTIONS: "--max-old-space-size=4096"
  # Playwright optimization
  PLAYWRIGHT_BROWSERS_PATH: 0

jobs:
  # Job 0: Quick Check (fast feedback for PRs)
  quick-check:
    name: ⚡ Quick Check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: github.event_name == 'pull_request'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: 📋 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Quick lint check
        run: pnpm lint --max-warnings 0

      - name: 🏗️ Type check
        run: pnpm type-check

      - name: 🧪 Quick test
        run: pnpm test:unit --run --reporter=basic

  # Job 1: Code Quality & Linting (runs in parallel)
  code-quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better analysis

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: 📋 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Run ESLint
        run: pnpm lint --format=json --output-file=eslint-report.json
        continue-on-error: true

      - name: 📊 Upload ESLint results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: eslint-report
          path: eslint-report.json

      - name: 🎨 Check code formatting
        run: |
          if ! pnpm exec prettier --check "src/**/*.{ts,tsx,css,json}"; then
            echo "❌ Code formatting issues found. Run 'pnpm format' to fix."
            exit 1
          fi

  # Job 2: Testing (runs in parallel)
  test:
    name: 🧪 Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: 📋 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🧪 Run unit tests with coverage
        run: pnpm test:unit
        env:
          CI: true

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unit-tests
          name: codecov-unit
          fail_ci_if_error: false

      - name: 📋 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-unit
          path: |
            coverage/

  # Job 3: Security Scanning (runs in parallel)
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: 📋 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Run security audit
        run: pnpm audit --audit-level moderate
        continue-on-error: true

      # CodeQL analysis removed - using GitHub's default setup instead

  # Job 4: Build & Performance (runs in parallel)
  build:
    name: 🏗️ Build & Performance
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: 📋 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build application
        run: pnpm build
        env:
          NODE_ENV: production
          CI: true

      - name: 📊 Analyze bundle size
        run: |
          echo "## 📦 Bundle Analysis" >> $GITHUB_STEP_SUMMARY
          echo "| File | Size | Gzipped |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|---------|" >> $GITHUB_STEP_SUMMARY

          for file in dist/assets/*.js; do
            if [ -f "$file" ]; then
              size=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file")
              gzipped=$(gzip -c "$file" | wc -c)
              filename=$(basename "$file")
              echo "| $filename | $(numfmt --to=iec $size) | $(numfmt --to=iec $gzipped) |" >> $GITHUB_STEP_SUMMARY
            fi
          done

      - name: 🚀 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-production
          path: dist/
          retention-days: 7

  # Job 5: Accessibility Testing (runs in parallel)
  accessibility:
    name: ♿ Accessibility
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      fail-fast: false
      matrix:
        theme: [light, dark]
        include:
          - theme: light
            theme_name: "浅色模式"
            media_query: "light"
          - theme: dark
            theme_name: "夜间模式"
            media_query: "dark"

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: 📋 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build application
        run: pnpm build

      - name: 🎨 Prepare theme-specific build (${{ matrix.theme_name }})
        run: |
          # Create temporary CSS files for different themes
          if [ "${{ matrix.theme }}" = "dark" ]; then
            echo "Preparing dark mode build..."
            # Force apply dark mode in built CSS files
            sed -i 's/@media (prefers-color-scheme: dark) {/:root {/g' dist/assets/*.css
            # Create a temporary CSS replacement file
            cat > /tmp/dark-theme.css << 'EOF'
          :root {
            --bg-primary: #0f172a;
            --bg-secondary: #1e293b;
            --bg-tertiary: #334155;
            --bg-accent: #1e293b;
            --text-primary: #f8fafc;
            --text-secondary: #e2e8f0;
            --text-muted: #94a3b8;
            --border-color: #334155;
            --border-hover: #475569;
          }
          EOF
            # Replace media query sections with dark theme variables
            for css_file in dist/assets/*.css; do
              if [ -f "$css_file" ]; then
                sed -i '/^@media (prefers-color-scheme: dark)/,/^}$/d' "$css_file"
                cat /tmp/dark-theme.css >> "$css_file"
              fi
            done
          fi

      - name: 🌐 Start preview server
        run: pnpm preview &
        env:
          PORT: 4173

      - name: ⏳ Wait for server
        run: npx wait-on http://localhost:4173

      - name: ♿ Run accessibility tests (${{ matrix.theme_name }})
        run: |
          echo "Testing accessibility in ${{ matrix.theme_name }}..."

          # Run axe-core tests
          npx @axe-core/cli http://localhost:4173 \
            --save accessibility-report-${{ matrix.theme }}.json \
            --tags wcag2a,wcag2aa \
            --timeout 30000 || echo "Accessibility issues found in ${{ matrix.theme_name }}"

          # Generate detailed report
          echo "## ♿ Accessibility Test Results - ${{ matrix.theme_name }}" >> $GITHUB_STEP_SUMMARY

          if [ -f "accessibility-report-${{ matrix.theme }}.json" ]; then
            # Parse JSON report and display results
            # Safely parse JSON with error handling
            violations=$(jq -r 'try (.violations | length) // 0' accessibility-report-${{ matrix.theme }}.json 2>/dev/null || echo "0")
            passes=$(jq -r 'try (.passes | length) // 0' accessibility-report-${{ matrix.theme }}.json 2>/dev/null || echo "0")

            echo "### 📊 Test Statistics" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Passed rules: $passes" >> $GITHUB_STEP_SUMMARY
            echo "- ❌ Violations: $violations" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            if [ "$violations" -eq "0" ]; then
              echo "🎉 **${{ matrix.theme_name }}下所有无障碍测试通过！**" >> $GITHUB_STEP_SUMMARY
            else
              echo "⚠️ **${{ matrix.theme_name }}下发现 $violations 个无障碍问题**" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### 🔍 Issue Details:" >> $GITHUB_STEP_SUMMARY
              
              # Safely parse violation information
              if command -v jq >/dev/null 2>&1 && [ "$violations" -gt "0" ]; then
                echo "### 🔍 Violation Details:" >> $GITHUB_STEP_SUMMARY
                jq -r 'try (.violations[]? | "#### " + .id + " (" + (.impact // "unknown") + " impact)\n" + (.description // "No description") + "\n- Affected elements: " + (.nodes | length | tostring) + "\n- Help link: " + (.helpUrl // "N/A") + "\n") // "Could not parse violation details"' accessibility-report-${{ matrix.theme }}.json >> $GITHUB_STEP_SUMMARY 2>/dev/null || echo "Could not parse violation details" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          else
            echo "⚠️ ${{ matrix.theme_name }}测试报告生成失败" >> $GITHUB_STEP_SUMMARY
          fi

          # If there are violations, set non-zero exit code (but don't block subsequent steps)
          if [ -f "accessibility-report-${{ matrix.theme }}.json" ]; then
            violations=$(jq -r 'try (.violations | length) // 0' accessibility-report-${{ matrix.theme }}.json 2>/dev/null || echo "0")
            if [ "$violations" -gt "0" ]; then
              echo "Found $violations accessibility violations in ${{ matrix.theme_name }}"
              # Don't exit, let tests continue running and upload reports
            fi
          fi

      - name: 📊 Upload accessibility report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-report-${{ matrix.theme }}
          path: accessibility-report-${{ matrix.theme }}.json

  # Job 6: Cross-browser Testing (runs in parallel)
  cross-browser:
    name: 🌐 Cross-browser
    runs-on: ubuntu-latest
    timeout-minutes: 20

    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
        shard: [1, 2]
        include:
          - browser: chromium
            project: chromium
          - browser: firefox
            project: firefox
          - browser: webkit
            project: webkit

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: 📋 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🎭 Install Playwright browsers
        run: |
          npx playwright install ${{ matrix.browser }} --with-deps
          # Verify browser installation
          npx playwright --version

      - name: 🏗️ Build application
        run: pnpm build

      # Playwright will handle server startup automatically

      - name: 🎭 Run Playwright tests
        run: |
          npx playwright test --config=playwright.config.ts \
            --project=${{ matrix.project }} \
            --shard=${{ matrix.shard }}/2 \
            --reporter=html,json:test-results-${{ matrix.browser }}-${{ matrix.shard }}.json
        env:
          CI: true
          PLAYWRIGHT_OUTPUT_DIR: test-results-${{ matrix.browser }}-${{ matrix.shard }}

      # Server cleanup handled by Playwright

      - name: 📊 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-results-${{ matrix.browser }}-${{ matrix.shard }}
          path: |
            test-results-${{ matrix.browser }}-${{ matrix.shard }}/
            test-results-${{ matrix.browser }}-${{ matrix.shard }}.json
          retention-days: 30

      - name: 📊 Upload Playwright HTML Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ matrix.browser }}-${{ matrix.shard }}
          path: playwright-report/
          retention-days: 30

  # Job 7: Performance Testing (runs after build)
  performance:
    name: ⚡ Performance
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 15

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: 📋 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-production
          path: dist/

      - name: 🌐 Start preview server
        run: npx serve -s dist -l 4173 &

      - name: ⏳ Wait for server
        run: npx wait-on http://localhost:4173

      - name: 🚀 Run Lighthouse CI
        run: |
          npm install -g @lhci/cli
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: 📊 Upload Lighthouse results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-results
          path: .lighthouseci/

  # Job 8: Dependency Analysis (runs in parallel)
  dependencies:
    name: 📦 Dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: 📋 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Check for outdated dependencies
        run: |
          echo "## 📦 Dependency Status" >> $GITHUB_STEP_SUMMARY
          pnpm outdated --format table > outdated.txt || true

          if [ -s outdated.txt ]; then
            echo "⚠️ Outdated dependencies found:" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            cat outdated.txt >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ All dependencies are up to date!" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 📊 Analyze bundle composition
        run: |
          pnpm add -D webpack-bundle-analyzer
          npx webpack-bundle-analyzer dist/assets/*.js --report --mode static --report-filename bundle-report.html

      - name: 📊 Upload dependency analysis
        uses: actions/upload-artifact@v4
        with:
          name: dependency-analysis
          path: |
            outdated.txt
            bundle-report.html

  # Job 9: Quality Gate (runs after all checks)
  quality-gate:
    name: 🚪 Quality Gate
    runs-on: ubuntu-latest
    needs: [code-quality, test, security, build, accessibility]
    if: always()
    timeout-minutes: 5

    steps:
      - name: 📊 Check job results
        run: |
          echo "## 🚪 Quality Gate Results" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality | ${{ needs.code-quality.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ needs.security.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Accessibility | ${{ needs.accessibility.result == 'success' && '✅ Passed' || '⚠️ Issues Found' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Accessibility test result details
          echo "### 📋 Accessibility Test Details" >> $GITHUB_STEP_SUMMARY
          echo "Accessibility tests run in both light and dark modes. Even if issues are found, deployment won't be blocked, but detailed reports will be generated for reference." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Fail if any critical job failed (excluding accessibility, as it may have warnings but shouldn't block deployment)
          if [[ "${{ needs.code-quality.result }}" != "success" ]] || \
             [[ "${{ needs.test.result }}" != "success" ]] || \
             [[ "${{ needs.build.result }}" != "success" ]]; then
            echo "❌ Quality gate failed! Critical checks did not pass." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          # Check accessibility test status (warning but not failure)
          if [[ "${{ needs.accessibility.result }}" != "success" ]]; then
            echo "⚠️ Note: Accessibility tests found some issues, please check the detailed report for fixes." >> $GITHUB_STEP_SUMMARY
          fi

          echo "✅ Quality gate passed!"

      - name: 🎉 Success notification
        if: success()
        run: |
          echo "🎉 All quality checks passed! Vercel will handle deployment automatically." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- Vercel webhook will trigger deployment automatically" >> $GITHUB_STEP_SUMMARY
          echo "- Monitor deployment status in Vercel dashboard" >> $GITHUB_STEP_SUMMARY
          echo "- Check live site after deployment completes" >> $GITHUB_STEP_SUMMARY
